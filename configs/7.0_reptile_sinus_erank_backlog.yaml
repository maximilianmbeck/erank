defaults:
  - hydra: jobname_outputdir_format
  - _self_
#######
hydra:
  verbose: ${config.trainer.verbose}
#######
run_config:
  exec_type: parallel # sequential
  hostname: dragonfly
  gpu_ids: [0, 1, 2, 3]
  runs_per_gpu: 5

  wandb: # wandb config for run_handler, if "wandb: null" then logging to wandb is disabled for run_handler
    init:
      tags:
        - ${config.experiment_data.experiment_tag}_exps
        - run_handler
      notes: #
      group: ${config.experiment_data.experiment_tag}
      job_type: run_handler

seeds:
  - 0

sweep:
  type: grid
  axes:
    - parameter: trainer.task_batch_size
      vals: [1, 5, 10]
    - parameter: trainer.n_inner_iter
      vals: [10, 30, 100]
    - parameter: trainer.erank.loss_coefficient
      vals: [0.0, 0.01, 0.1]

start_num: 0 # use this to count how often this config is run

###
config:
  experiment_data:
    entity: jkuiml-fsl # null
    project_name: erank_meta
    experiment_tag: "7.0"
    experiment_name: sinus-${config.experiment_data.experiment_tag}.${start_num}-erank_backlog-loss_coeff-${trainer.erank.loss_coefficient}-task_bs-${config.trainer.task_batch_size}-inner_iter-${config.trainer.n_inner_iter}
    experiment_dir: null
    seed: 0
    hostname: null # the server on which the run is run, will be filled by run_handler
    gpu_id: 0

  wandb:
    init:
      tags: # list(), used to tag wandblogger
        - ${config.experiment_data.experiment_tag}_exps
        - erank
      notes: Hypsearch for Reptile erank backlog # str, used to make notes to wandblogger
      group: ${config.experiment_data.experiment_tag} # null
      job_type: startnum_${start_num} # examples: hypsearch, pretrain, eval, etc.

    watch:
      log: null #parameters #null #all
      log_freq: 5000

  model:
    name: fc
    model_kwargs:
      input_size: 1
      hidden_sizes:
        - 64
        - 64
      output_size: 1
      flatten_input: true # can probably use also false
      dropout: null
      act_fn: relu

  trainer:
    training_setup: reptile
    n_epochs: 10e6 # number of iterations (outer/meta gradient steps)
    log_train_epoch_every: 2000 #10
    val_every: 5e3
    save_every: 10e6 # do not save during training manually
    early_stopping_patience: 25e3 # outer update steps # no early stopping
    task_batch_size: XXX #10 #1 #5 # meta-batch size (number of tasks sampled per iteration)
    optimizer_scheduler:
      optimizer_name: sgd #adamw # TODO implement optimizer state sharing between inner loops
      optimizer_kwargs:
        lr: 0.001 # default sine: 0.001
        weight_decay: 0.0 #0.001
    init_model: null
    inner_optimizer:
      optimizer_name: sgd
      optimizer_kwargs:
        lr: 0.01 # default sine: 0.01
    n_inner_iter: XXX #30 #3
    val_pred_plots_for_tasks: 1 # Prediction plots for `val_plots` tasks. If int: Uses the first `val_plots` tasks to generate plots
    inner_eval_after_steps: [0, 1, 2, 3, 5, 10, 20, 30, 50] # null: use default, List[int]: list of steps after, which eval is done
    log_plot_inner_learning_curves: true

    loss: mse
    erank:
      type: buffer #weightsdiff #none #random #buffer
      dir_buffer: null
      erank_kwargs:
        loss_coefficient: XXX
        buffer_size: ${config.trainer.task_batch_size} #10 # number of directions stored in the buffer
        buffer_mode: backlog # none, backlog, queue
        optim_model_vec_mode: basediff #abs #basediff # abs, stepdiff, basediff
        subspace_vecs_mode: basediff #abs #basediff # abs, initdiff, basediff
        track_last_n_model_steps: 0
        normalize_dir_matrix_m: False
    metrics:
      - MeanSquaredError
    num_workers: 4
    verbose: False #True

  data:
    metadataset: sinus
    train_metadataset_kwargs:
      support_size: 10
      query_size: 50
      num_tasks: 10000
      amplitude_range: [0.1, 5.0]
      phase_range: [0, 6.283185307]
      x_range: [-5, 5]
      regenerate_task_support_set: False
      seed: 0 # this seed is only used for task generation
    val_metadataset_kwargs:
      support_size: 10
      query_size: 50
      num_tasks: 50 #100 #1000
      amplitude_range: [0.1, 5.0]
      phase_range: [0, 6.283185307]
      x_range: [-5, 5]
      regenerate_task_support_set: False
      seed: 1 # different from train dataset
